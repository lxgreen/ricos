(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{166:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),p=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(t),b=a,m=d["".concat(o,".").concat(b)]||d[b]||u[b]||i;return t?r.a.createElement(m,l(l({ref:n},s),{},{components:t})):r.a.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=b;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},99:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(7),i=(t(0),t(166)),o={id:"ContentBuilder",title:"Content Builder",sidebar_label:"Content Builder"},l={unversionedId:"content_api/ContentBuilder",id:"content_api/ContentBuilder",isDocsHomePage:!1,title:"Content Builder",description:"This doc focuses on various API types, and not the exhaustive list of APIs. Examples based on Image demonstrate the \u201cblock\u201d plugin related APIs like Image, Divider, etc -- all the plugins that require a separate block (unlike \u201cinline\u201d plugins).",source:"@site/docs/content_api/ContentBuilder.md",slug:"/content_api/ContentBuilder",permalink:"/docs/content_api/ContentBuilder",editUrl:"https://github.com/wix/ricos/edit/master/website/docs/content_api/ContentBuilder.md",version:"current",sidebar_label:"Content Builder",sidebar:"api",previous:{title:"AppEmbed Data Extractor",permalink:"/docs/content_api/appembed_extract"},next:{title:"Content Extractor",permalink:"/docs/content_api/content_extract"}},c=[{value:"Instantiation",id:"instantiation",children:[]},{value:"Append / insert new content",id:"append--insert-new-content",children:[{value:"Adding bullet/ordered list",id:"adding-bulletordered-list",children:[]},{value:"Examples",id:"examples",children:[]}]}],s={toc:c};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This doc focuses on various API types, and not the exhaustive list of APIs. Examples based on Image demonstrate the \u201cblock\u201d plugin related APIs like Image, Divider, etc -- all the plugins that require a separate block (unlike \u201cinline\u201d plugins).\nExamples based on Paragraph demonstrate text related APIs."),Object(i.b)("p",null,"The Content Builder is stateless and immutable. This means, each API accepts RichContent to process, and returns a new copy of RichContent."),Object(i.b)("p",null,"All the building blocks (e.g. ImageData objects) are defined in ",Object(i.b)("inlineCode",{parentName:"p"},"ricos-schema")," package."),Object(i.b)("h2",{id:"instantiation"},"Instantiation"),Object(i.b)("p",null,"The ContentBuilder depends on key generation utility ",Object(i.b)("inlineCode",{parentName:"p"},"() => string")," which provides unique node keys. The ",Object(i.b)("inlineCode",{parentName:"p"},"wix-rich-content-common")," package exports such utility."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { setupContentBuilder } from 'ricos-content/libs/Content';\nimport { generateKey } from 'wix-rich-content-common';\n\nconst api = setupContentBuilder(generateKey);\n")),Object(i.b)("h2",{id:"append--insert-new-content"},"Append / insert new content"),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"add")," methods add new content nodes. The node position is defined either by index (i.e. sequential number inside nodes collection), or by before/after key (adds the content relatively to a given existing node addressed by key). If no index/before/after keys provided, the new content appended to the end."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"addImage({\n  data: ImageData,\n  index?: number,\n  before?: string,\n  after?: string,\n  content: RichContent\n}): RichContent;\n\naddParagraph({\n  text?: string | TextData | (string | TextData)[],\n  data?: ParagraphData,\n  index?: number,\n  before?: string,\n  after?: string\n}): RichContent;\n\n")),Object(i.b)("h3",{id:"adding-bulletordered-list"},"Adding bullet/ordered list"),Object(i.b)("p",null,"The list addition API is a bit different. It accepts ",Object(i.b)("em",{parentName:"p"},"items")," parameter which contains textual data, and an optional ",Object(i.b)("em",{parentName:"p"},"data")," parameter."),Object(i.b)("p",null,"This parameter determines the default data for paragraph that contains text. At the moment, lists support only paragraphs as list item containers."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"addBulletList({\n  items: string | TextData | ListItemData | (string | TextData | ListItemData)[],\n  data?: ParagraphData,\n  index?: number,\n  before?: string,\n  after?: string\n}): RichContent;\n\n")),Object(i.b)("h3",{id:"examples"},"Examples"),Object(i.b)("h4",{id:"image"},"Image"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"const api = setupContentBuilder(generateKey);\nconst imageData: ImageData = {\n  containerData: {\n    width: { size: PluginContainerData_Width_Type.SMALL },\n    alignment: PluginContainerData_Alignment.CENTER,\n  },\n  image: {...},\n};\nconst content = api.addImage({ data: imageData, content: { nodes: [] } });\n")),Object(i.b)("p",null,"returns the following content:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"{\n  nodes: [\n    {\n      type: Node_Type.IMAGE,\n      imageData,\n      nodes: [],\n      key: 'foo',\n    },\n  ],\n}\n")),Object(i.b)("h4",{id:"list"},"List"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"const paragraphData: ParagraphData = {\n  textStyle: {\n    textAlignment: TextStyle_TextAlignment.RIGHT,\n  },\n};\n\nconst content = api.addBulletList({\n  items: ['item1', 'item2'],\n  data: paragraphData,\n  content: { nodes: [] },\n});\n")),Object(i.b)("p",null,"results in:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"{\n  nodes: [\n    {\n      type: Node_Type.BULLETED_LIST,\n      key: 'foo',\n      nodes: [\n        {\n          type: Node_Type.LIST_ITEM,\n          key: 'foo',\n          nodes: [\n            {\n              type: Node_Type.PARAGRAPH,\n              key: 'foo',\n              paragraphData: {\n                textStyle: {\n                  textAlignment: TextStyle_TextAlignment.RIGHT,\n                },\n              },\n              nodes: [\n                {\n                  key: 'foo',\n                  type: Node_Type.TEXT,\n                  textData: {\n                    text: 'item1',\n                    decorations: [],\n                  },\n                  nodes: [],\n                },\n              ],\n            },\n          ],\n        },\n        {\n          type: Node_Type.LIST_ITEM,\n          key: 'foo',\n          nodes: [\n            {\n              type: Node_Type.PARAGRAPH,\n              key: 'foo',\n              paragraphData: {\n                textStyle: {\n                  textAlignment: TextStyle_TextAlignment.RIGHT,\n                },\n              },\n              nodes: [\n                {\n                  key: 'foo',\n                  type: Node_Type.TEXT,\n                  textData: {\n                    text: 'item2',\n                    decorations: [],\n                  },\n                  nodes: [],\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  ],\n}\n")))}p.isMDXComponent=!0}}]);