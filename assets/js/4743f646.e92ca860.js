(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{168:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),d=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=d(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=d(n),u=r,m=s["".concat(a,".").concat(u)]||s[u]||f[u]||i;return n?o.a.createElement(m,c(c({ref:t},l),{},{components:n})):o.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},99:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return d}));var r=n(3),o=n(7),i=(n(0),n(168)),a={id:"content_modify",title:"Content Modifier",sidebar_label:"Content Modifier"},c={unversionedId:"content_api/content_modify",id:"content_api/content_modify",isDocsHomePage:!1,title:"Content Modifier",description:"modify API",source:"@site/docs/content_api/content_modify.md",slug:"/content_api/content_modify",permalink:"/docs/content_api/content_modify",editUrl:"https://github.com/wix/ricos/edit/master/website/docs/content_api/content_modify.md",version:"current",sidebar_label:"Content Modifier",sidebar:"api",previous:{title:"Content Extractor",permalink:"/docs/content_api/content_extract"},next:{title:"Content Applications",permalink:"/docs/content_api/content_application"}},p=[{value:"modify API",id:"modify-api",children:[]},{value:"Examples",id:"examples",children:[]}],l={toc:p};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"modify-api"},"modify API"),Object(i.b)("p",null,"The Content Modifier provides access to content nodes regardless of their nesting level."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"modify")," API accepts RichContent object, and exposes ",Object(i.b)("inlineCode",{parentName:"p"},"Modifier"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"interface Modifier {\n  filter: (pred: (node: Node) => boolean) => Modifier;\n  set: (setter: (node: Node) => Node | Node[]) => RichContent;\n}\n")),Object(i.b)("h2",{id:"examples"},"Examples"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Modify image nodes - ensure altText is not empty:")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { modify } from 'ricos-content/libs/extract';\nimport { content } from 'your-own-content-from-somewhere';\n...\nconst newContent = modify(content)\n  .filter(n => n.type === Node_Type.IMAGE)\n  .set(n => ({\n    ...n,\n    imageData: {\n      ...n.imageData,\n      altText: n.imageData?.altText || 'Custom alt text',\n    },\n  }));\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Multiply dividers:")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"const newContent = modify(content)\n  .filter(({ type }) => type === Node_Type.DIVIDER)\n  .set(n => [n, n]);\n")))}d.isMDXComponent=!0}}]);